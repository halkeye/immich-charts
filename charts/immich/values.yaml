common:
  secrets:
    secret:
      enabled: true
      stringData:
        REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
        DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
        DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
        DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
        # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
        DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
        IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
        TYPESENSE_API_KEY: "some-random-string"

  service:
    main:
      enabled: false
    microservices:
      controller: microservices
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 3001
          protocol: HTTP
    machine-learning:
      controller: machine-learning
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 3003
          protocol: HTTP

  controllers:
    main:
      enabled: false

    microservices:
      containers:
        main:
          image:
            repository: ghcr.io/immich-app/immich-server
            pullPolicy: IfNotPresent
            tag: v1.91.4
          command: "/bin/sh"
          args:
            - "./start-microservices.sh"
          env:
            REDIS_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: REDIS_HOSTNAME
            DB_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_HOSTNAME
            DB_USERNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_USERNAME
            DB_DATABASE_NAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_DATABASE_NAME
            DB_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_PASSWORD
            IMMICH_MACHINE_LEARNING_URL:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: IMMICH_MACHINE_LEARNING_URL
            TYPESENSE_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: TYPESENSE_API_KEY
      persistence:
        library:
          enabled: true
          mountPath: /usr/src/app/upload

    server:
      containers:
        main:
          image:
            repository: ghcr.io/immich-app/immich-server
            pullPolicy: IfNotPresent
            tag: v1.91.4
          command: "/bin/sh"
          args:
            - "./start-server.sh"
          env:
            REDIS_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: REDIS_HOSTNAME
            DB_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_HOSTNAME
            DB_USERNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_USERNAME
            DB_DATABASE_NAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_DATABASE_NAME
            DB_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_PASSWORD
            IMMICH_MACHINE_LEARNING_URL:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: IMMICH_MACHINE_LEARNING_URL
            TYPESENSE_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: TYPESENSE_API_KEY
      ingress:
        main:
          enabled: false
          annotations:
            # proxy-body-size is set to 0 to remove the body limit on file uploads
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
          hosts:
            - host: immich.local
              paths:
                - path: "/"
          tls: []
      probes:
        liveness: &probes
          enabled: true
          custom: true
          spec:
            httpGet:
              path: /server-info/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
        readiness: *probes
        startup:
          enabled: false
      persistence:
        library:
          enabled: true
          mountPath: /usr/src/app/upload

    machine-learning:
      containers:
        main:
          image:
            repository: ghcr.io/immich-app/immich-machine-learning
            tag: v1.91.4
            pullPolicy: IfNotPresent
          env:
            TRANSFORMERS_CACHE: /cache
            REDIS_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: REDIS_HOSTNAME
            DB_HOSTNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_HOSTNAME
            DB_USERNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_USERNAME
            DB_DATABASE_NAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_DATABASE_NAME
            DB_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: DB_PASSWORD
            IMMICH_MACHINE_LEARNING_URL:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: IMMICH_MACHINE_LEARNING_URL
            TYPESENSE_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: TYPESENSE_API_KEY
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: http
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false

    typesense:
      containers:
        main:
          image:
            repository: typesense/typesense
            tag: 0.25.2
            pullPolicy: IfNotPresent
          env:
            TYPESENSE_DATA_DIR: /typesense-data
            TYPESENSE_API_KEY:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-secret"
                  key: TYPESENSE_API_KEY
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /ping
                  port: http
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
            startup:
              enabled: false
  persistence:
    machine-learning-cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: emptyDir
      accessMode: ReadWriteMany
      # storageClass: your-class
      advancedMounts:
        machine-learning:
          main:
            - path: /cache
    typesense-data:
      type: emptyDir
      advancedMounts:
        typesense:
          main:
            - path: /typesense-data
    library:
      type: emptyDir
      globalMounts:
        - path: /usr/src/app/upload
    geocoding-dump:
      type: emptyDir
      globalMounts:
        - path: /usr/src/app/.reverse-geocoding-dump
    transformers-cache:
      type: emptyDir
      globalMounts:
        - path: /usr/src/app/.transformers_cache

postgresql:
  enabled: false
  image:
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.1.11
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: immich
  primary:
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;

redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
